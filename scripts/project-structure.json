[
    {
        "type": "file",
        "name": "package.json",
        "content": "{\n  \"name\": \"project-chimera\",\n  \"version\": \"1.0.0.30\",\n  \"description\": \"AI-powered page summarizer Chrome extension\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack --config config/webpack.prod.js\",\n    \"dev\": \"webpack --config config/webpack.dev.js\",\n    \"test\": \"echo \\\"No tests specified\\\"\"\n  },\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.22.9\",\n    \"@babel/preset-env\": \"^7.22.9\",\n    \"babel-loader\": \"^9.1.3\",\n    \"copy-webpack-plugin\": \"^11.0.0\",\n    \"css-loader\": \"^6.8.1\",\n    \"html-webpack-plugin\": \"^5.5.3\",\n    \"mini-css-extract-plugin\": \"^2.7.6\",\n    \"webpack\": \"^5.88.2\",\n    \"webpack-cli\": \"^5.1.4\",\n    \"webpack-merge\": \"^5.9.0\"\n  }\n}"
    },
    {
        "type": "directory",
        "name": "src",
        "children": [
            {
                "type": "directory",
                "name": "assets",
                "children": [{ "type": "directory", "name": "icons", "children": [] }]
            },
            {
                "type": "directory",
                "name": "background",
                "children": [
                    {
                        "type": "file",
                        "name": "serviceWorker.js",
                        "content": "/**\n * Service Worker for Project Chimera\n * Handles SidePanel registration, context menu creation,\n * and message passing between components.\n */\n\n// Register the side panel\nchrome.sidePanel.setPanelBehavior({ openPanelOnActionClick: true });\n\n// Set up context menu for selecting text to summarize\nchrome.runtime.onInstalled.addListener(() => {\n\tchrome.contextMenus.create({\n\t\tid: \"summarizeSelection\",\n\t\ttitle: \"Summarize Selection\",\n\t\tcontexts: [\"selection\"]\n\t});\n});\n\n// Handle context menu clicks\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n\tif (info.menuItemId === \"summarizeSelection\" && info.selectionText) {\n\t\t// Open the side panel\n\t\tchrome.sidePanel.open({ tabId: tab.id });\n\n\t\t// Send the selected text to the side panel\n\t\t// We'll use a setTimeout to ensure the panel is open before sending\n\t\tsetTimeout(() => {\n\t\t\tchrome.runtime.sendMessage({\n\t\t\t\taction: \"summarizeSelection\",\n\t\t\t\ttext: info.selectionText\n\t\t\t});\n\t\t}, 300);\n\t}\n});\n\n// Listen for messages from content script and side panel\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n\t// Will handle different message types here as we develop\n\tconsole.log(\"Service worker received message:\", message);\n\n\t// Make sure to return true if we're going to send a response asynchronously\n\treturn true;\n});\n"
                    }
                ]
            },
            {
                "type": "directory",
                "name": "content",
                "children": [
                    {
                        "type": "file",
                        "name": "content-script.js",
                        "content": "/**\n * Content Script for Project Chimera\n *\n * Responsible for extracting content from web pages and\n * handling communication with the service worker.\n */\n\nconsole.log('Content script loaded');\n\n/**\n * Extracts the main content from the current webpage\n * using a multi-stage approach based on semantic HTML elements.\n *\n * @returns {string} The extracted page content\n */\nfunction extractPageContent() {\n\t// Start with higher-priority semantic elements\n\tconst mainElements = document.querySelectorAll('article, main, [role=\"main\"]');\n\tif (mainElements.length > 0) {\n\t\t// Use the first main element's content\n\t\treturn Array.from(mainElements)\n\t\t\t.map(el => el.innerText)\n\t\t\t.join('\\n\\n');\n\t}\n\n\t// Fallback to body content, but try to filter out navigation/footers\n\tconst bodyContent = document.body.innerText;\n\treturn bodyContent;\n}\n\n/**\n * Gets the page title and metadata\n *\n * @returns {object} Page metadata\n */\nfunction getPageMetadata() {\n\treturn {\n\t\ttitle: document.title,\n\t\turl: window.location.href,\n\t\ttimestamp: new Date().toISOString(),\n\t};\n}\n\n/**\n * Sends the full page content to the service worker for summarization\n */\nfunction summarizeFullPage() {\n\tconst content = extractPageContent();\n\tconst metadata = getPageMetadata();\n\n\tchrome.runtime.sendMessage({\n\t\taction: \"summarizeFullPage\",\n\t\tcontent: content,\n\t\tmetadata: metadata\n\t});\n}\n\n// Listen for messages from the service worker\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n\tconsole.log(\"Content script received message:\", message);\n\n\tif (message.action === 'extractPageContent') {\n\t\t// Simple content extraction for now\n\t\tconst content = document.body.innerText;\n\t\tconst title = document.title;\n\t\tconst url = window.location.href;\n\n\t\tsendResponse({\n\t\t\tcontent: content,\n\t\t\tmetadata: {\n\t\t\t\ttitle: title,\n\t\t\t\turl: url,\n\t\t\t\ttimestamp: new Date().toISOString()\n\t\t\t}\n\t\t});\n\t}\n\n\t// Return true to indicate we'll send a response asynchronously\n\treturn true;\n});\n\n// This will be expanded with more sophisticated content extraction in the future\nconsole.log(\"Project Chimera content script loaded\");\n"
                    }
                ]
            },
            {
                "type": "file",
                "name": "manifest.json",
                "content": "{\n  \"name\": \"Project Chimera - AI Page Summarizer\",\n  \"description\": \"Summarize web pages using AI directly from Chrome's side panel\",\n  \"version\": \"1.0.0.30\",\n  \"manifest_version\": 3,\n  \"icons\": {\n    \"16\": \"assets/icons/icon16.png\",\n    \"48\": \"assets/icons/icon48.png\",\n    \"128\": \"assets/icons/icon128.png\"\n  },\n  \"permissions\": [\n    \"sidePanel\",\n    \"contextMenus\",\n    \"storage\",\n    \"commands\",\n    \"tts\"\n  ],\n  \"host_permissions\": [\n    \"<all_urls>\"\n  ],\n  \"background\": {\n    \"service_worker\": \"background/serviceWorker.js\",\n    \"type\": \"module\"\n  },\n  \"side_panel\": {\n    \"default_path\": \"sidepanel/index.html\"\n  },\n  \"content_scripts\": [\n    {\n      \"matches\": [\n        \"<all_urls>\"\n      ],\n      \"js\": [\n        \"content/content-script.js\"\n      ]\n    }\n  ],\n  \"action\": {\n    \"default_title\": \"Open AI Summarizer\"\n  },\n  \"commands\": {\n    \"_execute_action\": {\n      \"suggested_key\": {\n        \"default\": \"Alt+S\"\n      },\n      \"description\": \"Open AI Summarizer\"\n    }\n  }\n}"
            },
            {
                "type": "directory",
                "name": "shared",
                "children": [
                    {
                        "type": "file",
                        "name": "api.js",
                        "content": "/**\n * API Client for Project Chimera\n * Handles communication with OpenAI API\n */\n\n/**\n * Generate a summary using OpenAI's API\n *\n * @param {string} content - The text content to summarize\n * @param {object} options - Summarization options\n * @param {string} options.format - The summary format (bullets, academic, professional, simplified)\n * @param {string} options.length - The summary length (brief, detailed)\n * @param {object} options.feedback - AI feedback options\n * @param {boolean} options.feedback.enableToneBiasAnalysis - Whether to include tone and bias analysis\n * @param {boolean} options.feedback.enableHighlightVagueClaims - Whether to highlight vague claims\n * @param {boolean} options.feedback.enableCounterpoints - Whether to present counterpoints\n * @param {boolean} options.feedback.enableSentimentDetection - Whether to detect sentiment\n * @param {boolean} options.feedback.enableIntentSummary - Whether to summarize intent\n * @param {boolean} options.feedback.enableFactContrast - Whether to contrast with known facts\n * @param {string} apiKey - The OpenAI API key\n * @returns {Promise<string>} - The generated summary\n */\nexport async function generateSummary(content, options, apiKey) {\n\ttry {\n\t\tconsole.log('API Client: Generating summary with options:', options);\n\n\t\tif (!apiKey) {\n\t\t\tthrow new Error('API key is required');\n\t\t}\n\n\t\t// Limit content length to prevent excessive token usage\n\t\tconst maxContentLength = 15000;\n\t\tconst truncatedContent = content.length > maxContentLength\n\t\t\t? content.substring(0, maxContentLength) + \"...(content truncated for token efficiency)\"\n\t\t\t: content;\n\n\t\t// Generate system prompt based on options\n\t\tconst systemPrompt = getSystemPrompt(options);\n\n\t\t// Make the actual fetch request to OpenAI API\n\t\tconst response = await fetch('https://api.openai.com/v1/chat/completions', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Authorization': `Bearer ${apiKey}`\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tmodel: 'gpt-3.5-turbo',\n\t\t\t\tmessages: [\n\t\t\t\t\t{\n\t\t\t\t\t\trole: 'system',\n\t\t\t\t\t\tcontent: systemPrompt\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: 'user',\n\t\t\t\t\t\tcontent: truncatedContent\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\ttemperature: 0.5 // Lower temperature for more consistent summaries\n\t\t\t})\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tconst errorData = await response.json().catch(() => null);\n\t\t\tconsole.error('API error response:', errorData);\n\t\t\tthrow new Error(`API request failed: ${response.status} ${response.statusText}`);\n\t\t}\n\n\t\tconst data = await response.json();\n\t\treturn data.choices[0].message.content;\n\n\t} catch (error) {\n\t\tconsole.error('Error generating summary:', error);\n\t\tthrow error;\n\t}\n}\n\n/**\n * Generate system prompt based on format and length options\n *\n * @param {object} options - The summary options\n * @returns {string} - The system prompt\n */\nfunction getSystemPrompt(options) {\n\tconst { format, length, feedback = {} } = options;\n\n\t// Base instructions\n\tlet prompt = `You are an AI assistant specialized in summarizing content. `;\n\n\t// Length-specific instructions\n\tif (length === 'brief') {\n\t\tprompt += `Create a concise summary that captures the main points in about 3-5 short paragraphs. `;\n\t} else if (length === 'detailed') {\n\t\tprompt += `Create a comprehensive summary that covers all significant points and details in about 5-7 paragraphs. `;\n\t}\n\n\tprompt += `Do not include any personal opinions or subjective statements. Focus solely on the content provided. `;\n\n\t// Format-specific instructions\n\tif (format === 'bullets') {\n\t\tprompt += `Format your response as a bulleted list of key points, with a very brief introduction. Use • as bullet points. Be direct and clear. `;\n\t} else if (format === 'academic') {\n\t\tprompt += `Format your response in an academic style with formal language, clear structure, and objective analysis. Include an introduction, body paragraphs, and conclusion. `;\n\t} else if (format === 'professional') {\n\t\tprompt += `Format your response as a professional executive summary with clear sections, factual statements, and actionable insights. Keep the tone neutral and the language precise. `;\n\t} else if (format === 'simplified') {\n\t\tprompt += `Format your response in simple, easy-to-understand language. Avoid complex terminology, use shorter sentences, and explain concepts clearly as if to someone with limited background knowledge. `;\n\t}\n\n\t// AI Feedback & Impressions options\n\tconst feedbackRequested = Object.values(feedback).some(value => value === true);\n\n\tif (feedbackRequested) {\n\t\tprompt += `\\n\\nAfter providing the summary, please include an \"ADDITIONAL ANALYSIS\" section with the following components:\\n`;\n\n\t\tif (feedback.enableToneBiasAnalysis) {\n\t\t\tprompt += `\\n<h3>Tone and Bias Analysis</h3>\\n<div class=\"analysis-section\">Analyze the tone of the content (formal, casual, persuasive, informative, etc.) and identify any potential biases or slants in the presentation. Consider word choice, framing, and what information is emphasized or omitted. Format this as 2-3 paragraphs.</div>\\n`;\n\t\t}\n\n\t\tif (feedback.enableHighlightVagueClaims) {\n\t\t\tprompt += `\\n<h3>Unsubstantiated or Vague Claims</h3>\\n<div class=\"analysis-section vague-claims-section\">\n\t\t\t<p>I've identified the following vague or unsubstantiated claims in the content:</p>\n\t\t\t<div class=\"claims-list\">\n\t\t\t`;\n\n\t\t\t// Enhanced vague claims detection instructions\n\t\t\tprompt += `For each vague claim you identify:\n\t\t\t1. <div class=\"claim-item\">\n\t\t\t   <div class=\"claim-text\"><span class=\"vague-claim\">Quote the exact claim text</span></div>\n\t\t\t   <div class=\"claim-type\">Specify the type of issue (Unverifiable, Overgeneralization, Ambiguous language, Missing context, etc.)</div>\n\t\t\t   <div class=\"claim-confidence\">Indicate confidence level (High, Medium, Low)</div>\n\t\t\t   <div class=\"claim-explanation\">Explain briefly why this claim is problematic</div>\n\t\t\t   <div class=\"claim-improvement\">Suggest how the claim could be improved</div>\n\t\t\t   </div>\n\n\t\t\tAim to identify 3-5 of the most significant vague or unsubstantiated claims in the content.\n\t\t\tFormat each claim as a separate div with the class \"claim-item\".\n\t\t\tIf there are no significant vague claims, clearly state this fact.\n\t\t\t</div></div>\\n`;\n\t\t}\n\n\t\tif (feedback.enableCounterpoints) {\n\t\t\tprompt += `\\n<h3>Alternative Perspectives</h3>\\n<div class=\"analysis-section\">Present reasonable counterpoints or alternative viewpoints that might not be adequately addressed in the content. Format this as 3-4 bullet points.</div>\\n`;\n\t\t}\n\n\t\tif (feedback.enableSentimentDetection) {\n\t\t\tprompt += `\\n<h3>Entity Sentiment Analysis</h3>\\n<div class=\"analysis-section\">Identify key entities (people, organizations, concepts) mentioned in the content and analyze the sentiment expressed toward each. Format as a brief list with <span class=\"entity-positive\">positive</span>, <span class=\"entity-neutral\">neutral</span>, or <span class=\"entity-negative\">negative</span> indicators for each entity.</div>\\n`;\n\t\t}\n\n\t\tif (feedback.enableIntentSummary) {\n\t\t\tprompt += `\\n<h3>Content Intent Analysis</h3>\\n<div class=\"analysis-section\">Briefly analyze the likely intent or purpose of the content (to inform, persuade, entertain, sell, etc.) and the underlying message. One paragraph maximum.</div>\\n`;\n\t\t}\n\n\t\tif (feedback.enableFactContrast) {\n\t\t\tprompt += `\\n<h3>Fact Checking Notes</h3>\\n<div class=\"analysis-section\">Identify statements that could benefit from fact-checking or additional context, and note any commonly accepted facts that might contradict claims in the content. Format as bullet points.</div>\\n`;\n\t\t}\n\t}\n\n\t// Feedback options\n\tif (feedback) {\n\t\tif (feedback.enableToneBiasAnalysis) {\n\t\t\tprompt += `Analyze the tone and potential bias in the content. `;\n\t\t}\n\t\tif (feedback.enableHighlightVagueClaims) {\n\t\t\tprompt += `Highlight any vague or ambiguous claims. `;\n\t\t}\n\t\tif (feedback.enableCounterpoints) {\n\t\t\tprompt += `Present potential counterpoints to the claims made. `;\n\t\t}\n\t\tif (feedback.enableSentimentDetection) {\n\t\t\tprompt += `Detect and summarize the sentiment expressed in the content. `;\n\t\t}\n\t\tif (feedback.enableIntentSummary) {\n\t\t\tprompt += `Summarize the intent behind the content. `;\n\t\t}\n\t\tif (feedback.enableFactContrast) {\n\t\t\tprompt += `Contrast the content with known facts or common knowledge. `;\n\t\t}\n\t}\n\n\tprompt += `Do not use any markdown, only HTML formatting if required. `;\n\tprompt += `<b> for bold text, <i> for italic text, <u> for underlined text, <p> for paragraphs, <br> for line breaks, <h3> for section headings. `;\n\tprompt += `Avoid using any other HTML tags, this is a partial HTML document.`;\n\n\treturn prompt;\n}\n"
                    },
                    {
                        "type": "file",
                        "name": "storage.js",
                        "content": "/**\n * Storage Manager for Project Chimera\n * Handles persistent storage operations\n */\n\n/**\n * Save a summary to history\n *\n * @param {Object} summaryData - The summary data to save\n * @param {string} summaryData.content - The summary text content\n * @param {Object} summaryData.metadata - Metadata about the summary\n * @param {string} summaryData.metadata.title - Page title\n * @param {string} summaryData.metadata.url - Page URL\n * @param {string} summaryData.metadata.timestamp - When the summary was created\n * @param {Object} summaryData.options - Summary generation options\n * @returns {Promise<void>}\n */\nexport async function saveSummaryToHistory(summaryData) {\n\ttry {\n\t\t// Get existing history\n\t\tconst data = await chrome.storage.local.get(['summaryHistory']);\n\t\tconst history = data.summaryHistory || [];\n\n\t\t// Add new summary to the beginning of the array (newest first)\n\t\thistory.unshift(summaryData);\n\n\t\t// Limit history to 50 items to prevent excessive storage usage\n\t\tconst limitedHistory = history.slice(0, 50);\n\n\t\t// Save back to storage\n\t\tawait chrome.storage.local.set({ summaryHistory: limitedHistory });\n\n\t\treturn true;\n\t} catch (error) {\n\t\tconsole.error('Error saving summary to history:', error);\n\t\treturn false;\n\t}\n}\n\n/**\n * Get all summary history\n *\n * @returns {Promise<Array>} Array of summary history items\n */\nexport async function getSummaryHistory() {\n\ttry {\n\t\tconst data = await chrome.storage.local.get(['summaryHistory']);\n\t\treturn data.summaryHistory || [];\n\t} catch (error) {\n\t\tconsole.error('Error getting summary history:', error);\n\t\treturn [];\n\t}\n}\n\n/**\n * Delete a summary from history by index\n *\n * @param {number} index - The index of the summary to delete\n * @returns {Promise<boolean>} Success status\n */\nexport async function deleteSummaryFromHistory(index) {\n\ttry {\n\t\tconst data = await chrome.storage.local.get(['summaryHistory']);\n\t\tconst history = data.summaryHistory || [];\n\n\t\tif (index >= 0 && index < history.length) {\n\t\t\thistory.splice(index, 1);\n\t\t\tawait chrome.storage.local.set({ summaryHistory: history });\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t} catch (error) {\n\t\tconsole.error('Error deleting summary from history:', error);\n\t\treturn false;\n\t}\n}\n\n/**\n * Clear all summary history\n *\n * @returns {Promise<boolean>} Success status\n */\nexport async function clearSummaryHistory() {\n\ttry {\n\t\tawait chrome.storage.local.set({ summaryHistory: [] });\n\t\treturn true;\n\t} catch (error) {\n\t\tconsole.error('Error clearing summary history:', error);\n\t\treturn false;\n\t}\n}\n"
                    }
                ]
            },
            {
                "type": "directory",
                "name": "sidepanel",
                "children": [
                    {
                        "type": "directory",
                        "name": "css",
                        "children": [
                            {
                                "type": "file",
                                "name": "main.css",
                                "content": ":root {\n\t--bg-primary: #ffffff;\n\t--bg-secondary: #f5f7fa;\n\t--text-primary: #333333;\n\t--text-secondary: #666666;\n\t--accent-color: #4f6df5;\n\t--accent-hover: #3b5bd9;\n\t--border-color: #e0e0e0;\n\t--error-color: #e53935;\n\t--success-color: #43a047;\n\n\t--spacing-xs: 4px;\n\t--spacing-sm: 8px;\n\t--spacing-md: 16px;\n\t--spacing-lg: 24px;\n\t--spacing-xl: 32px;\n\t--border-radius: 4px;\n\n\t--font-family: 'Outfit', system-ui, -apple-system, sans-serif;\n}\n\n[data-theme=\"dark\"] {\n\t--bg-primary: #1e1e1e;\n\t--bg-secondary: #2d2d2d;\n\t--text-primary: #e0e0e0;\n\t--text-secondary: #b0b0b0;\n\t--border-color: #3d3d3d;\n}\n\n* {\n\tbox-sizing: border-box;\n\tmargin: 0;\n\tpadding: 0;\n}\n\nbody {\n\tfont-family: var(--font-family);\n\tbackground-color: var(--bg-primary);\n\tcolor: var(--text-primary);\n\tfont-size: 14px;\n\tline-height: 1.5;\n\tmargin: 0;\n\tpadding: 0;\n\tmin-width: 300px;\n\ttransition: background-color 0.3s ease;\n}\n\n.app-container {\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100vh;\n\tmax-width: 100%;\n}\n\n.app-header {\n\tpadding: var(--spacing-md);\n\tborder-bottom: 1px solid var(--border-color);\n\tbackground-color: var(--bg-primary);\n}\n\n.app-header h1 {\n\tfont-size: 18px;\n\tfont-weight: 500;\n\tmargin: 0;\n}\n\n.tab-navigation {\n\tdisplay: flex;\n\tborder-bottom: 1px solid var(--border-color);\n\tbackground-color: var(--bg-primary);\n}\n\n.tab-button {\n\tflex: 1;\n\tpadding: var(--spacing-md);\n\tbackground: none;\n\tborder: none;\n\tcursor: pointer;\n\tcolor: var(--text-secondary);\n\tfont-weight: 500;\n\ttransition: color 0.2s, border-bottom 0.2s;\n}\n\n.tab-button.active {\n\tcolor: var(--accent-color);\n\tborder-bottom: 2px solid var(--accent-color);\n}\n\n.tab-button:hover:not(.active) {\n\tcolor: var(--text-primary);\n}\n\n.tab-button:focus {\n\toutline: none;\n\tbackground-color: rgba(79, 109, 245, 0.05);\n}\n\n.tab-content {\n\tflex: 1;\n\toverflow-y: auto;\n\tpadding: var(--spacing-md);\n}\n\n.tab-panel {\n\tdisplay: none;\n}\n\n.tab-panel.active {\n\tdisplay: block;\n}\n\n.controls-container {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tgap: var(--spacing-md);\n\tmargin-bottom: var(--spacing-md);\n}\n\n.format-controls,\n.length-controls {\n\tmin-width: 140px;\n}\n\nlabel {\n\tdisplay: block;\n\tmargin-bottom: var(--spacing-xs);\n\tcolor: var(--text-secondary);\n\tfont-size: 13px;\n}\n\nselect {\n\twidth: 100%;\n\tpadding: 8px;\n\tborder: 1px solid var(--border-color);\n\tborder-radius: var (--border-radius);\n\tbackground-color: var(--bg-primary);\n\tcolor: var(--text-primary);\n}\n\n.primary-button {\n\twidth: 100%;\n\tpadding: var(--spacing-sm);\n\tbackground-color: var(--accent-color);\n\tcolor: white;\n\tborder: none;\n\tborder-radius: var(--border-radius);\n\tcursor: pointer;\n\tfont-weight: 500;\n\ttransition: background-color 0.2s;\n}\n\n.primary-button:hover {\n\tbackground-color: var(--accent-hover);\n}\n\n.primary-button:focus {\n\toutline: none;\n\tbox-shadow: 0 0 0 2px rgba(79, 109, 245, 0.3);\n}\n\n.summary-result-container {\n\tmargin-top: var(--spacing-lg);\n\tborder-radius: var(--border-radius);\n\tbackground-color: var(--bg-secondary);\n\tmin-height: 100px;\n}\n\n#summary-content {\n\tpadding: var(--spacing-md);\n}\n\n#summary-content.hidden {\n\tdisplay: none;\n}\n\n.summary-header {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tmargin-bottom: var(--spacing-md);\n}\n\n.summary-header h2 {\n\tfont-size: 16px;\n\tfont-weight: 500;\n\tmargin: 0;\n}\n\n.summary-actions button {\n\tbackground: none;\n\tborder: none;\n\tcursor: pointer;\n\tpadding: var(--spacing-xs);\n\tcolor: var(--text-secondary);\n\tborder-radius: var(--border-radius);\n}\n\n.summary-actions button:hover {\n\tcolor: var(--text-primary);\n\tbackground-color: var(--bg-primary);\n}\n\n#summary-text {\n\tline-height: 1.6;\n\twhite-space: pre-wrap;\n}\n\n#loading-indicator {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\tpadding: var(--spacing-xl);\n}\n\n#loading-indicator.hidden {\n\tdisplay: none;\n}\n\n.spinner {\n\twidth: 30px;\n\theight: 30px;\n\tborder: 3px solid rgba(79, 109, 245, 0.3);\n\tborder-radius: 50%;\n\tborder-top-color: var(--accent-color);\n\tanimation: spin 1s linear infinite;\n\tmargin-bottom: var(--spacing-md);\n}\n\n@keyframes spin {\n\t0% {\n\t\ttransform: rotate(0deg);\n\t}\n\n\t100% {\n\t\ttransform: rotate(360deg);\n\t}\n}\n\n.settings-group {\n\tmargin-bottom: var(--spacing-lg);\n}\n\n.settings-group h3 {\n\tfont-size: 15px;\n\tmargin-bottom: var(--spacing-md);\n\tcolor: var(--text-primary);\n}\n\n.setting-item {\n\tmargin-bottom: var(--spacing-md);\n}\n\n.setting-description {\n\tfont-size: 12px;\n\tcolor: var(--text-secondary);\n\tmargin-top: var(--spacing-xs);\n}\n\ninput[type=\"password\"],\ninput[type=\"text\"] {\n\twidth: 100%;\n\tpadding: 8px;\n\tborder: 1px solid var(--border-color);\n\tborder-radius: var(--border-radius);\n\tbackground-color: var(--bg-primary);\n\tcolor: var(--text-primary);\n}\n\n.toggle-switch {\n\tposition: relative;\n\tdisplay: inline-block;\n\twidth: 44px;\n\theight: 24px;\n\tvertical-align: middle;\n\tmargin-right: var(--spacing-md);\n}\n\n.toggle-switch input {\n\topacity: 0;\n\twidth: 0;\n\theight: 0;\n}\n\n.toggle-slider {\n\tposition: absolute;\n\tcursor: pointer;\n\ttop: 0;\n\tleft: 0;\n\tright: 0;\n\tbottom: 0;\n\tbackground-color: var(--border-color);\n\ttransition: 0.4s;\n\tborder-radius: 34px;\n}\n\n.toggle-slider:before {\n\tposition: absolute;\n\tcontent: \"\";\n\theight: 18px;\n\twidth: 18px;\n\tleft: 3px;\n\tbottom: 3px;\n\tbackground-color: white;\n\ttransition: 0.4s;\n\tborder-radius: 50%;\n}\n\ninput:checked+.toggle-slider {\n\tbackground-color: var(--accent-color);\n}\n\ninput:checked+.toggle-slider:before {\n\ttransform: translateX(20px);\n}\n\n.search-container {\n\tmargin-bottom: var(--spacing-md);\n}\n\n.search-container input {\n\twidth: 100%;\n\tpadding: 8px 12px;\n\tborder: 1px solid var(--border-color);\n\tborder-radius: var(--border-radius);\n}\n\n#error-message {\n\tpadding: var(--spacing-md);\n\tcolor: var (--error-color);\n}\n\n#error-message.hidden {\n\tdisplay: none;\n}\n\n.error-actions {\n\tdisplay: flex;\n\tgap: var(--spacing-md);\n\tmargin-top: var(--spacing-md);\n}\n\n.secondary-button {\n\tpadding: var(--spacing-sm) var(--spacing-sm);\n\tbackground-color: var(--bg-primary);\n\tcolor: var(--text-primary);\n\tborder: 1px solid var(--border-color);\n\tborder-radius: var(--border-radius);\n\tcursor: pointer;\n\tfont-weight: 500;\n\ttransition: background-color 0.2s;\n}\n\n.secondary-button:hover {\n\tbackground-color: var(--bg-secondary);\n}\n\n.app-footer {\n\tpadding: var(--spacing-sm);\n\tborder-top: 1px solid var(--border-color);\n\ttext-align: center;\n\tfont-size: 12px;\n\tcolor: var(--text-secondary);\n}\n\n\n.history-actions {\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\tmargin-bottom: var(--spacing-md);\n}\n\n.history-item {\n\tbackground-color: var(--bg-secondary);\n\tborder-radius: var(--border-radius);\n\tpadding: var(--spacing-md);\n\tmargin-bottom: var(--spacing-md);\n}\n\n.history-item-header {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: flex-start;\n\tmargin-bottom: var(--spacing-xs);\n}\n\n.history-item-title {\n\tfont-size: 15px;\n\tfont-weight: 500;\n\tmargin: 0;\n\tline-height: 1.3;\n\tflex: 1;\n\tcursor: pointer;\n\tpadding: var(--spacing-xs) 0;\n}\n\n.history-item-title:hover {\n\tcolor: var(--accent-color);\n}\n\n.history-item-actions {\n\tdisplay: flex;\n\tgap: var(--spacing-xs);\n}\n\n.history-item-actions button {\n\tbackground: none;\n\tborder: none;\n\tcursor: pointer;\n\tpadding: 4px;\n\tcolor: var(--text-secondary);\n\tborder-radius: var(--border-radius);\n}\n\n.history-item-actions button:hover {\n\tcolor: var(--text-primary);\n\tbackground-color: var(--bg-primary);\n}\n\n.history-item-meta {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\tfont-size: 12px;\n\tcolor: var(--text-secondary);\n\tmargin-bottom: var(--spacing-xs);\n}\n\n.history-item-url {\n\tfont-size: 12px;\n\tcolor: var(--accent-color);\n\twhite-space: nowrap;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n\tmargin-bottom: var(--spacing-sm);\n}\n\n.history-item-content {\n\tfont-size: 13px;\n\tline-height: 1.5;\n\twhite-space: pre-wrap;\n\tpadding: var(--spacing-sm);\n\tbackground-color: var(--bg-primary);\n\tborder-radius: var(--border-radius);\n\tmargin-top: var(--spacing-sm);\n\tmax-height: 200px;\n\toverflow-y: auto;\n\ttext-align: left;\n\tpadding-left: var(--spacing-md);\n\tpadding-right: var(--spacing-md);\n}\n\n.history-item-content.hidden {\n\tdisplay: none;\n}\n\n.empty-state {\n\ttext-align: center;\n\tpadding: var(--spacing-xl);\n\tcolor: var(--text-secondary);\n}\n\n.confirmation-overlay {\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\tright: 0;\n\tbottom: 0;\n\tbackground-color: rgba(0, 0, 0, 0.5);\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tz-index: 1000;\n}\n\n.confirmation-dialog {\n\tbackground-color: var(--bg-primary);\n\tborder-radius: var(--border-radius);\n\tpadding: var(--spacing-lg);\n\twidth: 80%;\n\tmax-width: 300px;\n\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n.confirmation-dialog p {\n\tmargin-bottom: var(--spacing-md);\n\tcolor: var(--text-primary);\n\ttext-align: center;\n}\n\n.confirmation-buttons {\n\tdisplay: flex;\n\tgap: var(--spacing-md);\n\tjustify-content: space-around;\n\tmargin-top: var(--spacing-md);\n}\n\n.confirmation-buttons button {\n\tmin-width: 80px;\n}\n\n/* AI Analysis Styling */\n.analysis-header {\n\tfont-size: 16px;\n\tfont-weight: 600;\n\tmargin-top: var(--spacing-xl);\n\tmargin-bottom: var(--spacing-md);\n\tpadding-top: var(--spacing-md);\n\tborder-top: 1px solid var(--border-color);\n\tcolor: var(--accent-color);\n}\n\n#summary-text h3 {\n\tfont-size: 15px;\n\tfont-weight: 600;\n\tmargin-top: var(--spacing-lg);\n\tmargin-bottom: var(--spacing-md);\n\tcolor: var(--text-primary);\n\tborder-bottom: 1px solid var(--border-color);\n\tpadding-bottom: var(--spacing-xs);\n}\n\n#summary-text strong {\n\tdisplay: block;\n\tfont-size: 14px;\n\tfont-weight: 500;\n\tmargin-top: var(--spacing-md);\n\tmargin-bottom: var(--spacing-sm);\n\tcolor: var(--text-primary);\n\tborder-bottom: 1px solid var(--border-color);\n\tpadding-bottom: var(--spacing-xs);\n}\n\n/* Additional AI Analysis styling */\n#summary-text .analysis-section {\n\tbackground-color: rgba(79, 109, 245, 0.05);\n\tborder-radius: var(--border-radius);\n\tpadding: var(--spacing-md);\n\tmargin-bottom: var(--spacing-md);\n}\n\n#summary-text .vague-claims-section {\n\tmargin-top: var(--spacing-xs);\n\tbackground-color: rgba(245, 245, 245, 0.5);\n\tborder-radius: var(--border-radius);\n\tpadding: var(--spacing-md);\n\tborder-left: 3px solid var(--accent-color);\n}\n\n#summary-text .vague-claims-section p {\n\tmargin-bottom: var(--spacing-md);\n}\n\n#summary-text ul {\n\tpadding-left: var(--spacing-lg);\n\tmargin-top: var(--spacing-xs);\n\tmargin-bottom: var(--spacing-md);\n}\n\n#summary-text li {\n\tmargin-bottom: var(--spacing-xs);\n}\n\n/* Entity sentiment styling */\n.entity-positive {\n\tcolor: var(--success-color);\n\tfont-weight: 500;\n}\n\n.entity-negative {\n\tcolor: var(--error-color);\n\tfont-weight: 500;\n}\n\n.entity-neutral {\n\tcolor: var(--text-secondary);\n\tfont-style: italic;\n}\n\n/* Vague claims highlight */\n.vague-claim {\n\tbackground-color: rgba(255, 193, 7, 0.2);\n\tborder-bottom: 1px dashed rgba(229, 57, 53, 0.5);\n\tpadding: 0 var(--spacing-xs);\n\tborder-radius: 2px;\n\tfont-weight: 500;\n}\n\n/* Enhanced Vague Claims Styling */\n.vague-claims-section {\n\tbackground-color: rgba(245, 245, 245, 0.5);\n\tborder-radius: var(--border-radius);\n\tpadding: var(--spacing-md);\n}\n\n.claims-list {\n\tmargin-top: var(--spacing-sm);\n}\n\n.claim-item {\n\tborder-left: 3px solid var(--border-color);\n\tpadding: var(--spacing-sm) var(--spacing-md);\n\tmargin-bottom: var(--spacing-md);\n\tbackground-color: var(--bg-primary);\n\tborder-radius: 0 var(--border-radius) var(--border-radius) 0;\n\tbox-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n\ttransition: all 0.2s ease;\n}\n\n.claim-item:hover {\n\tborder-left-color: var(--accent-color);\n\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.claim-number {\n\tfont-weight: 500;\n\tmargin-bottom: var(--spacing-xs);\n\tcolor: var(--accent-color);\n\tdisplay: inline-block;\n\tmargin-right: var(--spacing-xs);\n}\n\n.claim-text {\n\tfont-weight: 500;\n\tmargin-bottom: var(--spacing-sm);\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tpadding: var(--spacing-xs) 0;\n}\n\n.claim-text::before {\n\tcontent: \"🔍 \";\n\tfont-size: 14px;\n\tmargin-right: var(--spacing-xs);\n}\n\n.claim-type,\n.claim-confidence,\n.claim-explanation,\n.claim-improvement {\n\tmargin-top: var(--spacing-xs);\n\tmargin-bottom: var(--spacing-xs);\n\tfont-size: 13px;\n\tline-height: 1.4;\n\tpadding-left: var(--spacing-md);\n}\n\n.type-label,\n.confidence,\n.explanation-label,\n.improvement-label {\n\tfont-weight: 500;\n\tcolor: var(--text-secondary);\n\tmargin-right: var(--spacing-xs);\n}\n\n.confidence {\n\tpadding: 2px 6px;\n\tborder-radius: 10px;\n\tfont-size: 11px;\n\ttext-transform: uppercase;\n\tdisplay: inline-block;\n}\n\n.confidence.high {\n\tbackground-color: rgba(67, 160, 71, 0.15);\n\tcolor: var(--success-color);\n}\n\n.confidence.medium {\n\tbackground-color: rgba(255, 152, 0, 0.15);\n\tcolor: #f57c00;\n}\n\n.confidence.low {\n\tbackground-color: rgba(229, 57, 53, 0.15);\n\tcolor: var(--error-color);\n}\n\n.claim-improvement {\n\tbackground-color: rgba(79, 109, 245, 0.05);\n\tpadding: var(--spacing-xs) var(--spacing-sm);\n\tborder-radius: var(--border-radius);\n\tmargin-top: var(--spacing-sm);\n\tmargin-bottom: var(--spacing-sm);\n}\n\n.no-claims {\n\tcolor: var(--text-secondary);\n\tfont-style: italic;\n\ttext-align: center;\n\tpadding: var(--spacing-md);\n}\n"
                            }
                        ]
                    },
                    {
                        "type": "file",
                        "name": "index.html",
                        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>AI Page Summarizer</title>\n        <link rel=\"stylesheet\" href=\"css/main.css\" />\n    </head>\n    <body>\n        <div class=\"app-container\">\n            <header class=\"app-header\">\n                <h1>AI Page Summarizer</h1>\n            </header>\n\n            <div class=\"tab-navigation\">\n                <button class=\"tab-button active\" data-tab=\"summary\">Summary</button>\n                <button class=\"tab-button\" data-tab=\"history\">History</button>\n                <button class=\"tab-button\" data-tab=\"settings\">Settings</button>\n            </div>\n\n            <main class=\"tab-content\">\n                <!-- Summary Tab -->\n                <section id=\"summary-tab\" class=\"tab-panel active\">\n                    <div class=\"controls-container\">\n                        <div class=\"format-controls\">\n                            <label for=\"format-select\">Format:</label>\n                            <select id=\"format-select\">\n                                <option value=\"bullets\">Bullet Points</option>\n                                <option value=\"academic\">Academic</option>\n                                <option value=\"professional\">Professional</option>\n                                <option value=\"simplified\">Simplified</option>\n                            </select>\n                        </div>\n\n                        <div class=\"length-controls\">\n                            <label for=\"length-select\">Length:</label>\n                            <select id=\"length-select\">\n                                <option value=\"brief\">Brief</option>\n                                <option value=\"detailed\">Detailed</option>\n                            </select>\n                        </div>\n                    </div>\n\n                    <button id=\"summarize-btn\" class=\"primary-button\">Summarize Page</button>\n\n                    <div class=\"summary-result-container\">\n                        <div id=\"loading-indicator\" class=\"hidden\">\n                            <div class=\"spinner\"></div>\n                            <p>Generating summary...</p>\n                        </div>\n\n                        <div id=\"summary-content\" class=\"hidden\">\n                            <div class=\"summary-header\">\n                                <h2 id=\"summary-title\">Page Summary</h2>\n                                <div class=\"summary-actions\">\n                                    <button id=\"copy-btn\" title=\"Copy to clipboard\">\n                                        <span class=\"icon\">📋</span>\n                                    </button>\n                                    <button id=\"speak-btn\" title=\"Listen to summary\">\n                                        <span class=\"icon\">🔊</span>\n                                    </button>\n                                </div>\n                            </div>\n                            <div id=\"summary-text\"></div>\n                            <div id=\"additional-analysis\">\n                                <div id=\"tone-bias\"></div>\n                                <div id=\"highlight-vague-claims\"></div>\n                                <div id=\"counterpoints\"></div>\n                                <div id=\"sentiment-detection\"></div>\n                                <div id=\"intent-summary\"></div>\n                                <div id=\"fact-contrast\"></div>\n                            </div>\n                        </div>\n\n                        <div id=\"error-message\" class=\"hidden\">\n                            <p>There was an error generating the summary. Please try again.</p>\n                            <div class=\"error-actions\">\n                                <button id=\"retry-btn\" class=\"secondary-button\">Try Again</button>\n                                <button id=\"settings-btn\" class=\"secondary-button\">\n                                    Go to Settings\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n\n                <!-- History Tab -->\n                <section id=\"history-tab\" class=\"tab-panel hidden\">\n                    <h2>Summary History</h2>\n                    <div class=\"search-container\">\n                        <input type=\"text\" id=\"history-search\" placeholder=\"Search history...\" />\n                    </div>\n                    <div class=\"history-actions\">\n                        <button id=\"clear-history-btn\" class=\"secondary-button\">Clear All</button>\n                    </div>\n                    <div id=\"history-list\">\n                        <!-- History items will be inserted here dynamically -->\n                        <div class=\"empty-state\">\n                            <p>No summary history yet.</p>\n                        </div>\n                    </div>\n                </section>\n\n                <!-- Settings Tab -->\n                <section id=\"settings-tab\" class=\"tab-panel hidden\">\n                    <h2>Settings</h2>\n\n                    <div class=\"settings-group\">\n                        <h3>Appearance</h3>\n                        <div class=\"setting-item\">\n                            <label for=\"theme-select\">Theme:</label>\n                            <select id=\"theme-select\">\n                                <option value=\"light\">Light</option>\n                                <option value=\"dark\">Dark</option>\n                                <option value=\"system\">System Default</option>\n                            </select>\n                        </div>\n                    </div>\n\n                    <div class=\"settings-group\">\n                        <h3>API Configuration</h3>\n                        <div class=\"setting-item\">\n                            <label for=\"api-key\">OpenAI API Key:</label>\n                            <input type=\"password\" id=\"api-key\" placeholder=\"Enter your API key\" />\n                            <p class=\"setting-description\">\n                                Your API key is stored securely and used only for generating\n                                summaries.\n                            </p>\n                        </div>\n                    </div>\n\n                    <div class=\"settings-group\">\n                        <h3>Extension</h3>\n                        <div class=\"setting-item\">\n                            <label class=\"toggle-switch\">\n                                <input type=\"checkbox\" id=\"enable-content-script\" checked />\n                                <span class=\"toggle-slider\"></span>\n                            </label>\n                            <span>Enable extension on all pages</span>\n                        </div>\n                    </div>\n\n                    <div class=\"settings-group\">\n                        <h3>AI Feedback & Impressions</h3>\n                        <div class=\"setting-item\">\n                            <label class=\"toggle-switch\">\n                                <input type=\"checkbox\" id=\"enable-tone-bias-analysis\" />\n                                <span class=\"toggle-slider\"></span>\n                            </label>\n                            <span>Offer tone and bias analysis of content</span>\n                        </div>\n                        <div class=\"setting-item\">\n                            <label class=\"toggle-switch\">\n                                <input type=\"checkbox\" id=\"enable-highlight-vague-claims\" />\n                                <span class=\"toggle-slider\"></span>\n                            </label>\n                            <span>Highlight unsubstantiated or vague claims</span>\n                            <p class=\"setting-description\">\n                                Identifies questionable claims with detailed analysis and\n                                improvement suggestions.\n                            </p>\n                        </div>\n                        <div class=\"setting-item\">\n                            <label class=\"toggle-switch\">\n                                <input type=\"checkbox\" id=\"enable-counterpoints\" />\n                                <span class=\"toggle-slider\"></span>\n                            </label>\n                            <span>Present counterpoints or alternative perspectives</span>\n                        </div>\n                        <div class=\"setting-item\">\n                            <label class=\"toggle-switch\">\n                                <input type=\"checkbox\" id=\"enable-sentiment-detection\" />\n                                <span class=\"toggle-slider\"></span>\n                            </label>\n                            <span>Detect sentiment toward mentioned entities</span>\n                        </div>\n                        <div class=\"setting-item\">\n                            <label class=\"toggle-switch\">\n                                <input type=\"checkbox\" id=\"enable-intent-summary\" />\n                                <span class=\"toggle-slider\"></span>\n                            </label>\n                            <span>Summarize intent of the page</span>\n                        </div>\n                        <div class=\"setting-item\">\n                            <label class=\"toggle-switch\">\n                                <input type=\"checkbox\" id=\"enable-fact-contrast\" />\n                                <span class=\"toggle-slider\"></span>\n                            </label>\n                            <span>Include contrast with known facts (opt-in)</span>\n                        </div>\n                    </div>\n\n                    <button id=\"save-settings\" class=\"primary-button\">Save Settings</button>\n                </section>\n            </main>\n\n            <footer class=\"app-footer\">\n                <p>Project Chimera v1.0.1</p>\n            </footer>\n        </div>\n    </body>\n</html>\n"
                    },
                    {
                        "type": "directory",
                        "name": "js",
                        "children": [
                            {
                                "type": "file",
                                "name": "main.js",
                                "content": "/**\n * Main JavaScript for Project Chimera SidePanel\n */\nimport { generateSummary } from '../../shared/api.js';\nimport { saveSummaryToHistory, getSummaryHistory, deleteSummaryFromHistory, clearSummaryHistory } from '../../shared/storage.js';\n\nconst tabButtons = document.querySelectorAll('.tab-button');\nconst tabPanels = document.querySelectorAll('.tab-panel');\nconst summarizeBtn = document.getElementById('summarize-btn');\nconst copyBtn = document.getElementById('copy-btn');\nconst speakBtn = document.getElementById('speak-btn');\nconst formatSelect = document.getElementById('format-select');\nconst lengthSelect = document.getElementById('length-select');\nconst loadingIndicator = document.getElementById('loading-indicator');\nconst summaryContent = document.getElementById('summary-content');\nconst summaryText = document.getElementById('summary-text');\nconst errorMessage = document.getElementById('error-message');\nconst saveSettingsBtn = document.getElementById('save-settings');\nconst apiKeyInput = document.getElementById('api-key');\nconst themeSelect = document.getElementById('theme-select');\n\n// Add references to the new analysis divs\nconst toneBiasDiv = document.getElementById('tone-bias');\nconst highlightVagueClaimsDiv = document.getElementById('highlight-vague-claims');\nconst counterpointsDiv = document.getElementById('counterpoints');\nconst sentimentDetectionDiv = document.getElementById('sentiment-detection');\nconst intentSummaryDiv = document.getElementById('intent-summary');\nconst factContrastDiv = document.getElementById('fact-contrast');\nconst additionalAnalysisContainer = document.getElementById('additional-analysis');\n\nlet isInitialized = false;\n\n/**\n * Initialize the sidepanel UI\n */\nfunction initialize() {\n\tconsole.log('Initialize called from:', new Error().stack);\n\tconsole.log('Project Chimera sidepanel initialized');\n\n\tsetupTabNavigation();\n\n\tsetupEventListeners();\n\n\tloadUserPreferences();\n\n\tcheckForPendingMessages();\n\n\tcheckApiKeyAndRedirect();\n\n\tloadHistoryData();\n}\n\n/**\n * Set up tab navigation functionality\n */\nfunction setupTabNavigation() {\n\ttabButtons.forEach(button => {\n\t\tbutton.addEventListener('click', () => {\n\t\t\tconst tabName = button.getAttribute('data-tab');\n\n\t\t\ttabButtons.forEach(btn => {\n\t\t\t\tbtn.classList.remove('active');\n\t\t\t});\n\t\t\tbutton.classList.add('active');\n\n\t\t\ttabPanels.forEach(panel => {\n\t\t\t\tpanel.classList.remove('active');\n\t\t\t\tpanel.classList.add('hidden');\n\t\t\t});\n\n\t\t\tconst activePanel = document.getElementById(`${tabName}-tab`);\n\t\t\tactivePanel.classList.add('active');\n\t\t\tactivePanel.classList.remove('hidden');\n\t\t});\n\t});\n}\n\n/**\n * Set up other event listeners\n */\nfunction setupEventListeners() {\n\tif (summarizeBtn) {\n\t\tsummarizeBtn.addEventListener('click', handleSummarizeClick);\n\t}\n\n\tif (copyBtn) {\n\t\tcopyBtn.addEventListener('click', handleCopyClick);\n\t}\n\n\tif (speakBtn) {\n\t\tspeakBtn.addEventListener('click', handleSpeakClick);\n\t}\n\n\tif (saveSettingsBtn) {\n\t\tsaveSettingsBtn.addEventListener('click', handleSaveSettings);\n\t}\n\n\tif (themeSelect) {\n\t\tthemeSelect.addEventListener('change', handleThemeChange);\n\t}\n\n\tconst retryBtn = document.getElementById('retry-btn');\n\tif (retryBtn) {\n\t\tretryBtn.addEventListener('click', handleSummarizeClick);\n\t}\n\n\tconst settingsBtn = document.getElementById('settings-btn');\n\tif (settingsBtn) {\n\t\tsettingsBtn.addEventListener('click', () => switchToTab('settings'));\n\t}\n\n\tconst clearHistoryBtn = document.getElementById('clear-history-btn');\n\tif (clearHistoryBtn) {\n\t\tclearHistoryBtn.addEventListener('click', async () => {\n\t\t\tshowCustomConfirmation('Are you sure you want to clear all summary history?', async () => {\n\t\t\t\tawait clearSummaryHistory();\n\t\t\t\tloadHistoryData();\n\t\t\t});\n\t\t});\n\t}\n\n\tconst historyTabBtn = Array.from(tabButtons).find(\n\t\tbutton => button.getAttribute('data-tab') === 'history'\n\t);\n\n\tif (historyTabBtn) {\n\t\thistoryTabBtn.addEventListener('click', () => {\n\t\t\tloadHistoryData();\n\t\t});\n\t}\n}\n\n/**\n * Handle summarize button click\n */\nasync function handleSummarizeClick() {\n\ttry {\n\t\tshowLoading(true);\n\t\thideError();\n\n\t\tconst format = formatSelect.value;\n\t\tconst length = lengthSelect.value;\n\n\t\tconst settings = await getSettings();\n\t\tif (!settings.apiKey) {\n\t\t\tthrow new Error('API key is required. Please add your OpenAI API key in the Settings tab.');\n\t\t}\n\n\t\tconst pageData = await requestPageContent();\n\n\t\tconst feedbackSettings = {\n\t\t\tenableToneBiasAnalysis: settings.enableToneBiasAnalysis || false,\n\t\t\tenableHighlightVagueClaims: settings.enableHighlightVagueClaims || false,\n\t\t\tenableCounterpoints: settings.enableCounterpoints || false,\n\t\t\tenableSentimentDetection: settings.enableSentimentDetection || false,\n\t\t\tenableIntentSummary: settings.enableIntentSummary || false,\n\t\t\tenableFactContrast: settings.enableFactContrast || false\n\t\t};\n\n\t\tconst summary = await generateSummary(\n\t\t\tpageData.content,\n\t\t\t{ format, length, feedback: feedbackSettings },\n\t\t\tsettings.apiKey\n\t\t);\n\n\t\tdisplaySummary(summary);\n\n\t\tsaveFormatAndLengthPreferences(format, length);\n\n\t\tconst history = await getSummaryHistory();\n\t\tconst isDuplicate = history.some(item =>\n\t\t\titem.metadata.url === pageData.metadata.url &&\n\t\t\titem.content === summary &&\n\t\t\tMath.abs(new Date(item.timestamp) - new Date()) < 60000\n\t\t);\n\n\t\tif (!isDuplicate) {\n\t\t\tawait saveSummaryToHistory({\n\t\t\t\tcontent: summary,\n\t\t\t\tmetadata: pageData.metadata,\n\t\t\t\toptions: { format, length },\n\t\t\t\ttimestamp: new Date().toISOString()\n\t\t\t});\n\t\t}\n\n\t} catch (error) {\n\t\tconsole.error('Error summarizing page:', error);\n\t\tshowError(error.message || 'An error occurred while generating the summary.');\n\t}\n}\n\n/**\n * Get settings from storage\n * @returns {Promise<Object>}\n */\nfunction getSettings() {\n\treturn new Promise((resolve) => {\n\t\tchrome.storage.local.get(['settings'], data => {\n\t\t\tresolve(data.settings || {});\n\t\t});\n\t});\n}\n\n/**\n * Request page content from the content script\n * @returns {Promise<Object>} The page content and metadata\n */\nfunction requestPageContent() {\n\treturn new Promise((resolve, reject) => {\n\t\tchrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n\t\t\tif (!tabs[0]) {\n\t\t\t\treject(new Error('No active tab found'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tabUrl = tabs[0].url;\n\t\t\tif (tabUrl.startsWith('chrome://') || tabUrl.startsWith('chrome-extension://')) {\n\t\t\t\treject(new Error('Summarization is not available on Chrome internal pages.'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchrome.tabs.sendMessage(\n\t\t\t\ttabs[0].id,\n\t\t\t\t{ action: 'extractPageContent' },\n\t\t\t\tresponse => {\n\t\t\t\t\tif (chrome.runtime.lastError) {\n\t\t\t\t\t\tconsole.error(\"Content script error:\", chrome.runtime.lastError);\n\t\t\t\t\t\treject(new Error('Could not connect to the page. Try refreshing the page or verifying that the extension is enabled.'));\n\t\t\t\t\t} else if (response) {\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(new Error('No response from content script'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t});\n}\n\n/**\n * Handle copy button click\n */\nfunction handleCopyClick() {\n\tif (summaryText.innerHTML) {\n\t\tnavigator.clipboard.writeText(summaryText.textContent)\n\t\t\t.then(() => {\n\t\t\t\tconst originalText = copyBtn.innerHTML;\n\t\t\t\tcopyBtn.innerHTML = '<span class=\"icon\">✓</span>';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tcopyBtn.innerHTML = originalText;\n\t\t\t\t}, 1500);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.error('Could not copy text:', err);\n\t\t\t});\n\t}\n}\n\n/**\n * Handle speak button click\n */\nfunction handleSpeakClick() {\n\tif (summaryText.textContent) {\n\t\tchrome.tts.speak(summaryText.textContent, {\n\t\t\trate: 1.0,\n\t\t\tonEvent: function (event) {\n\t\t\t\tif (event.type === 'error') {\n\t\t\t\t\tconsole.error('TTS Error:', event);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Handle save settings button click\n */\nfunction handleSaveSettings() {\n\tconst settings = {\n\t\ttheme: themeSelect.value,\n\t\tapiKey: apiKeyInput.value,\n\t\tenableContentScript: document.getElementById('enable-content-script').checked,\n\t\tenableToneBiasAnalysis: document.getElementById('enable-tone-bias-analysis').checked,\n\t\tenableHighlightVagueClaims: document.getElementById('enable-highlight-vague-claims').checked,\n\t\tenableCounterpoints: document.getElementById('enable-counterpoints').checked,\n\t\tenableSentimentDetection: document.getElementById('enable-sentiment-detection').checked,\n\t\tenableIntentSummary: document.getElementById('enable-intent-summary').checked,\n\t\tenableFactContrast: document.getElementById('enable-fact-contrast').checked\n\t};\n\n\tchrome.storage.local.set({ settings }, () => {\n\t\tconst originalText = saveSettingsBtn.textContent;\n\t\tsaveSettingsBtn.textContent = 'Saved!';\n\t\tsetTimeout(() => {\n\t\t\tsaveSettingsBtn.textContent = originalText;\n\t\t}, 1500);\n\n\t\tapplyTheme(settings.theme);\n\t});\n}\n\n/**\n * Handle theme change\n */\nfunction handleThemeChange() {\n\tapplyTheme(themeSelect.value);\n}\n\n/**\n * Apply theme to the UI\n * @param {string} theme - The theme to apply ('light', 'dark', or 'system')\n */\nfunction applyTheme(theme) {\n\tif (theme === 'system') {\n\t\tif (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n\t\t\tdocument.documentElement.setAttribute('data-theme', 'dark');\n\t\t} else {\n\t\t\tdocument.documentElement.setAttribute('data-theme', 'light');\n\t\t}\n\n\t\twindow.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n\t\t\tdocument.documentElement.setAttribute('data-theme', e.matches ? 'dark' : 'light');\n\t\t});\n\t} else {\n\t\tdocument.documentElement.setAttribute('data-theme', theme);\n\t}\n}\n\n/**\n * Load user preferences from storage\n */\nfunction loadUserPreferences() {\n\tchrome.storage.local.get(['settings', 'formatPreference', 'lengthPreference'], data => {\n\t\tif (data.settings) {\n\t\t\tif (themeSelect) themeSelect.value = data.settings.theme || 'system';\n\t\t\tif (apiKeyInput) apiKeyInput.value = data.settings.apiKey || '';\n\n\t\t\tif (document.getElementById('enable-content-script')) {\n\t\t\t\tdocument.getElementById('enable-content-script').checked =\n\t\t\t\t\tdata.settings.enableContentScript !== undefined ? data.settings.enableContentScript : true;\n\t\t\t}\n\n\t\t\tif (document.getElementById('enable-tone-bias-analysis')) {\n\t\t\t\tdocument.getElementById('enable-tone-bias-analysis').checked =\n\t\t\t\t\tdata.settings.enableToneBiasAnalysis || false;\n\t\t\t}\n\n\t\t\tif (document.getElementById('enable-highlight-vague-claims')) {\n\t\t\t\tdocument.getElementById('enable-highlight-vague-claims').checked =\n\t\t\t\t\tdata.settings.enableHighlightVagueClaims || false;\n\t\t\t}\n\n\t\t\tif (document.getElementById('enable-counterpoints')) {\n\t\t\t\tdocument.getElementById('enable-counterpoints').checked =\n\t\t\t\t\tdata.settings.enableCounterpoints || false;\n\t\t\t}\n\n\t\t\tif (document.getElementById('enable-sentiment-detection')) {\n\t\t\t\tdocument.getElementById('enable-sentiment-detection').checked =\n\t\t\t\t\tdata.settings.enableSentimentDetection || false;\n\t\t\t}\n\n\t\t\tif (document.getElementById('enable-intent-summary')) {\n\t\t\t\tdocument.getElementById('enable-intent-summary').checked =\n\t\t\t\t\tdata.settings.enableIntentSummary || false;\n\t\t\t}\n\n\t\t\tif (document.getElementById('enable-fact-contrast')) {\n\t\t\t\tdocument.getElementById('enable-fact-contrast').checked =\n\t\t\t\t\tdata.settings.enableFactContrast || false;\n\t\t\t}\n\n\t\t\tapplyTheme(data.settings.theme || 'system');\n\t\t}\n\n\t\tif (formatSelect && data.formatPreference) {\n\t\t\tformatSelect.value = data.formatPreference;\n\t\t}\n\n\t\tif (lengthSelect && data.lengthPreference) {\n\t\t\tlengthSelect.value = data.lengthPreference;\n\t\t}\n\t});\n}\n\n/**\n * Save format and length preferences\n * @param {string} format - Selected format\n * @param {string} length - Selected length\n */\nfunction saveFormatAndLengthPreferences(format, length) {\n\tchrome.storage.local.set({\n\t\tformatPreference: format,\n\t\tlengthPreference: length\n\t});\n}\n\n/**\n * Check for any pending messages (e.g., from context menu)\n */\nfunction checkForPendingMessages() {\n\tchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n\t\tconsole.log('SidePanel received message:', message);\n\n\t\tif (message.action === 'summarizeSelection' && message.text) {\n\t\t\tshowLoading(true);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst selectedTextSummary = `Selected Text Summary:\\n\\n${message.text}`;\n\t\t\t\tdisplaySummary(selectedTextSummary);\n\t\t\t}, 1000);\n\t\t}\n\n\t\treturn true;\n\t});\n}\n\n/**\n * Show or hide loading indicator\n * @param {boolean} isLoading - Whether to show loading indicator\n */\nfunction showLoading(isLoading) {\n\tif (isLoading) {\n\t\tloadingIndicator.classList.remove('hidden');\n\t\tsummaryContent.classList.add('hidden');\n\t\terrorMessage.classList.add('hidden');\n\t} else {\n\t\tloadingIndicator.classList.add('hidden');\n\t}\n}\n\n/**\n * Hide error message\n */\nfunction hideError() {\n\terrorMessage.classList.add('hidden');\n}\n\n/**\n * Display a summary in the UI\n * @param {string} summary - The summary text to display\n */\nfunction displaySummary(summary) {\n\tlet mainSummaryContent = summary;\n\tlet analysisContent = '';\n\n\t// Clear previous content\n\tif (summaryText) summaryText.innerHTML = '';\n\tif (toneBiasDiv) toneBiasDiv.innerHTML = '';\n\tif (highlightVagueClaimsDiv) highlightVagueClaimsDiv.innerHTML = '';\n\tif (counterpointsDiv) counterpointsDiv.innerHTML = '';\n\tif (sentimentDetectionDiv) sentimentDetectionDiv.innerHTML = '';\n\tif (intentSummaryDiv) intentSummaryDiv.innerHTML = '';\n\tif (factContrastDiv) factContrastDiv.innerHTML = '';\n\tif (additionalAnalysisContainer) additionalAnalysisContainer.classList.add('hidden');\n\n\n\t// Separate main summary from additional analysis\n\tconst analysisMarker = 'ADDITIONAL ANALYSIS';\n\tconst analysisHeaderRegex = /<div class=\"analysis-header\">ADDITIONAL ANALYSIS<\\/div>/i;\n\n\tif (summary.includes(analysisMarker) || analysisHeaderRegex.test(summary)) {\n\t\tlet parts;\n\t\tif (analysisHeaderRegex.test(summary)) {\n\t\t\tparts = summary.split(analysisHeaderRegex);\n\t\t} else {\n\t\t\tparts = summary.split(new RegExp(`\\\\s*${analysisMarker}\\\\s*`, 'i'));\n\t\t}\n\t\tmainSummaryContent = parts[0];\n\t\tif (parts.length > 1) {\n\t\t\tanalysisContent = parts[1];\n\t\t}\n\t}\n\n\t// Display main summary\n\tif (summaryText) {\n\t\tsummaryText.innerHTML = convertMarkdownToHtml(mainSummaryContent.trim());\n\t}\n\n\t// Process and display additional analysis if present\n\tif (analysisContent.trim()) {\n\t\tif (additionalAnalysisContainer) additionalAnalysisContainer.classList.remove('hidden');\n\n\t\t// Split analysis content into sections based on <h3> tags\n\t\tconst sectionSplitRegex = /(<h3>.*?<\\/h3>)/i;\n\t\tconst sections = analysisContent.split(sectionSplitRegex).filter(s => s.trim() !== '');\n\n\t\tfor (let i = 0; i < sections.length; i += 2) {\n\t\t\tconst headerHtml = sections[i];\n\t\t\tconst contentHtml = sections[i + 1] || '';\n\n\t\t\t// Extract header text for matching\n\t\t\tconst tempHeader = document.createElement('div');\n\t\t\ttempHeader.innerHTML = headerHtml;\n\t\t\tconst headerText = tempHeader.textContent || tempHeader.innerText || \"\";\n\n\n\t\t\tif (headerText.includes('Tone and Bias Analysis')) {\n\t\t\t\tif (toneBiasDiv) toneBiasDiv.innerHTML = headerHtml + convertMarkdownToHtml(contentHtml);\n\t\t\t} else if (headerText.includes('Unsubstantiated or Vague Claims') || headerText.includes('Highlight Unsubstantiated or Vague Claims')) {\n\t\t\t\tif (highlightVagueClaimsDiv) {\n\t\t\t\t\t// The processVagueClaimsSection expects the content part, not the header\n\t\t\t\t\t// It will generate its own structure including a title if needed or just the list\n\t\t\t\t\thighlightVagueClaimsDiv.innerHTML = headerHtml + processVagueClaimsSection(contentHtml);\n\t\t\t\t}\n\t\t\t} else if (headerText.includes('Counterpoints') || headerText.includes('Alternative Perspectives')) {\n\t\t\t\tif (counterpointsDiv) counterpointsDiv.innerHTML = headerHtml + convertMarkdownToHtml(contentHtml);\n\t\t\t} else if (headerText.includes('Sentiment Detection') || headerText.includes('Sentiment toward Mentioned Entities')) {\n\t\t\t\tif (sentimentDetectionDiv) sentimentDetectionDiv.innerHTML = headerHtml + convertMarkdownToHtml(contentHtml);\n\t\t\t} else if (headerText.includes('Intent Summary') || headerText.includes('Intent of the Page')) {\n\t\t\t\tif (intentSummaryDiv) intentSummaryDiv.innerHTML = headerHtml + convertMarkdownToHtml(contentHtml);\n\t\t\t} else if (headerText.includes('Fact Contrast') || headerText.includes('Contrast with Known Facts')) {\n\t\t\t\tif (factContrastDiv) factContrastDiv.innerHTML = headerHtml + convertMarkdownToHtml(contentHtml);\n\t\t\t} else {\n\t\t\t\t// Fallback for unknown sections, append to a general area or log\n\t\t\t\tconsole.warn('Unknown analysis section:', headerText);\n\t\t\t\t// Optionally, append to a default analysis div or the main summary text\n\t\t\t}\n\t\t}\n\n\t\t// Add event listeners to any claim items after populating vague claims\n\t\tconst claimItems = document.querySelectorAll('.claim-item');\n\t\tclaimItems.forEach(item => {\n\t\t\titem.addEventListener('click', function (e) {\n\t\t\t\tif (e.target.closest('.claim-text')) {\n\t\t\t\t\tthis.classList.toggle('expanded');\n\t\t\t\t\tconst details = this.querySelectorAll('.claim-type, .claim-confidence, .claim-explanation, .claim-improvement');\n\t\t\t\t\tdetails.forEach(el => {\n\t\t\t\t\t\tel.classList.toggle('expanded');\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\n\tif (summaryContent) {\n\t\tsummaryContent.classList.remove('hidden');\n\t}\n\n\tif (loadingIndicator) {\n\t\tloadingIndicator.classList.add('hidden');\n\t}\n}\n\n/**\n * Convert markdown formatting to HTML\n * @param {string} text - The markdown text to convert\n * @returns {string} - The converted HTML\n */\nfunction convertMarkdownToHtml(text) {\n\t// Safety check for null or undefined text\n\tif (!text) return '';\n\n\tlet converted = text;\n\n\ttry {\n\t\t// Convert bullet points to HTML list\n\t\tconverted = converted.replace(/(?:^|\\n)(\\s*[•\\-\\*]\\s+.*(?:\\n\\s+[^•\\-\\*].*)*)+/gm, function (match) {\n\t\t\tif (!match) return '';\n\n\t\t\tconst items = match.split(/\\n/)\n\t\t\t\t.filter(line => line && line.trim())\n\t\t\t\t.map(line => {\n\t\t\t\t\t// Check if this is a bullet point\n\t\t\t\t\tif (line && line.trim().match(/^\\s*[•\\-\\*]/)) {\n\t\t\t\t\t\treturn `<li>${line.replace(/^\\s*[•\\-\\*]\\s+/, '')}</li>`;\n\t\t\t\t\t}\n\t\t\t\t\t// This is a continuation of the previous bullet point\n\t\t\t\t\treturn line;\n\t\t\t\t})\n\t\t\t\t.join('');\n\t\t\treturn `<ul>${items}</ul>`;\n\t\t});\n\n\t\t// Convert numbered lists to HTML ordered lists\n\t\tconverted = converted.replace(/(?:^|\\n)(\\s*\\d+\\.\\s+.*(?:\\n\\s+[^\\d\\.].*)*)+/gm, function (match) {\n\t\t\tif (!match) return '';\n\n\t\t\tconst items = match.split(/\\n/)\n\t\t\t\t.filter(line => line && line.trim())\n\t\t\t\t.map(line => {\n\t\t\t\t\t// Check if this is a numbered item\n\t\t\t\t\tif (line && line.trim().match(/^\\s*\\d+\\.\\s+/)) {\n\t\t\t\t\t\treturn `<li>${line.replace(/^\\s*\\d+\\.\\s+/, '')}</li>`;\n\t\t\t\t\t}\n\t\t\t\t\t// This is a continuation of the previous numbered item\n\t\t\t\t\treturn line;\n\t\t\t\t})\n\t\t\t\t.join('');\n\t\t\treturn `<ol>${items}</ol>`;\n\t\t});\n\n\t\t// Convert bold markdown to HTML\n\t\tconverted = converted.replace(/\\*\\*([^*]+)\\*\\*/g, '<strong>$1</strong>');\n\n\t\t// Convert italic markdown to HTML\n\t\tconverted = converted.replace(/\\*([^*]+)\\*/g, '<em>$1</em>');\n\t} catch (error) {\n\t\tconsole.error('Error converting markdown to HTML:', error);\n\t\t// Return the original text if an error occurs\n\t\treturn text;\n\t}\n\n\treturn converted;\n}\n\n/**\n * Process and enhance the vague claims section\n * @param {string} section - The vague claims section\n * @returns {string} - The processed section\n */\nfunction processVagueClaimsSection(section) {\n\t// Clean up any excessive whitespace that might be causing padding issues\n\tsection = section.replace(/\\s{2,}/g, ' ').trim();\n\n\t// If no vague claims were found\n\tif (section.toLowerCase().includes('no significant vague claims') || section.toLowerCase().includes('no significant vague or unsubstantiated claims')) {\n\t\treturn `\n        <div class=\"analysis-section vague-claims-section\">\n            <p class=\"no-claims\">No significant vague or unsubstantiated claims were identified in this content.</p>\n        </div>`;\n\t}\n\n\t// Create a clean structure for the claims section\n\tlet formattedContent = `\n    <div class=\"analysis-section vague-claims-section\">\n        <p class=\"section-intro\">The following vague or unsubstantiated claims were identified:</p>\n        <div class=\"claims-list\">`;\n\n\t// First, try to find claims using numbered patterns\n\t// Look for patterns like: 1. \"Nvidia isn't opening the interconnect standard entirely\" (Lack of Clarity, Medium)\n\tconst claimPattern = /(\\d+)\\.\\s*\"([^\"]+)\"\\s*(?:\\(([^)]+)(?:,\\s*([^)]+))?\\))?/g;\n\tlet match;\n\tlet claimNumber = 1;\n\tlet hasMatches = false;\n\n\t// Find claim patterns in the content\n\twhile ((match = claimPattern.exec(section)) !== null) {\n\t\thasMatches = true;\n\t\tconst [, , claimText, claimType = '', confidence = ''] = match;\n\n\t\t// Get explanation and improvement text that follows this claim\n\t\tconst startPos = match.index + match[0].length;\n\t\tconst nextClaimMatch = section.substring(startPos).match(/\\d+\\.\\s+\"[^\"]+\"/);\n\t\tconst endPos = nextClaimMatch ? startPos + nextClaimMatch.index : section.length;\n\t\tconst followingText = section.substring(startPos, endPos);\n\n\t\t// Extract explanation and improvement from the following text\n\t\tconst explanation = extractExplanation(followingText);\n\t\tconst improvement = extractImprovement(followingText);\n\n\t\t// Format a clean claim item matching the structure in the screenshot\n\t\tformattedContent += formatClaimItem(claimNumber, claimText, claimType, confidence, explanation, improvement);\n\t\tclaimNumber++;\n\t}\n\n\t// If no matches were found using pattern matching, try to parse the content directly\n\tif (!hasMatches && section.length > 30) {\n\t\t// Try to find claim sections based on the HTML structure\n\t\tconst claimSections = section.match(/<li>[\\s\\S]*?<\\/li>/g);\n\n\t\tif (claimSections && claimSections.length > 0) {\n\t\t\tclaimSections.forEach((section, index) => {\n\t\t\t\t// Extract components from the claim section\n\t\t\t\tconst claimMatch = section.match(/\"([^\"]+)\"/);\n\t\t\t\tif (claimMatch) {\n\t\t\t\t\tconst claimText = claimMatch[1].trim();\n\n\t\t\t\t\tconst typeMatch = section.match(/<div class=\"claim-type\">([^<]+)<\\/div>/);\n\t\t\t\t\tconst claimType = typeMatch ? typeMatch[1].replace('Type:', '').trim() : '';\n\n\t\t\t\t\tconst confidenceMatch = section.match(/<div class=\"claim-confidence\">([^<]+)<\\/div>/);\n\t\t\t\t\tconst confidence = confidenceMatch ? confidenceMatch[1].replace('Confidence:', '').trim() : '';\n\n\t\t\t\t\tconst explanationMatch = section.match(/<div class=\"claim-explanation\">([^<]+)<\\/div>/);\n\t\t\t\t\tconst explanation = explanationMatch ? explanationMatch[1].replace('Issue:', '').trim() : '';\n\n\t\t\t\t\tconst improvementMatch = section.match(/<div class=\"claim-improvement\">([^<]+)<\\/div>/);\n\t\t\t\t\tconst improvement = improvementMatch ? improvementMatch[1].replace('Suggested Improvement:', '').trim() : '';\n\n\t\t\t\t\tformattedContent += formatClaimItem(claimNumber++, claimText, claimType, confidence, explanation, improvement);\n\t\t\t\t}\n\t\t\t});\n\t\t\thasMatches = true;\n\t\t}\n\t}\n\n\t// If we still don't have matches, use a more liberal approach to find claims\n\tif (!hasMatches) {\n\t\t// Find paragraphs that might contain claims\n\t\tconst paragraphs = section.split(/(?:<p>|<div>)/);\n\t\tparagraphs.forEach((para, index) => {\n\t\t\tif (para.includes('\"') && para.length > 30) {\n\t\t\t\tconst quoteMatch = para.match(/\"([^\"]+)\"/);\n\t\t\t\tif (quoteMatch) {\n\t\t\t\t\tconst claimText = quoteMatch[1];\n\t\t\t\t\tformattedContent += formatClaimItem(claimNumber++, claimText, 'Unspecified', '', '', '');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tformattedContent += `\n        </div>\n    </div>`;\n\n\t// Return the section content, the H3 will be added by the caller if needed\n\treturn formattedContent;\n}\n\n/**\n * Extract explanation text from a claim's following text\n * @param {string} text - The text following a claim\n * @returns {string} - The extracted explanation\n */\nfunction extractExplanation(text) {\n\tconst patterns = [\n\t\t/The statement lacks clarity on (.+?)(?=\\.|\\n|$)/i,\n\t\t/This claim (.+?)(?=\\.|\\n|$)/i,\n\t\t/Issue: (.+?)(?=\\.|\\n|$)/i,\n\t\t/Explanation: (.+?)(?=\\.|\\n|$)/i\n\t];\n\n\tfor (const pattern of patterns) {\n\t\tconst match = text.match(pattern);\n\t\tif (match && match[1]) {\n\t\t\treturn match[1].trim() + '.';\n\t\t}\n\t}\n\n\treturn '';\n}\n\n/**\n * Extract improvement suggestion from a claim's following text\n * @param {string} text - The text following a claim\n * @returns {string} - The extracted improvement suggestion\n */\nfunction extractImprovement(text) {\n\tconst patterns = [\n\t\t/To improve,? (.+?)(?=\\.|\\n|$)/i,\n\t\t/Suggested improvement: (.+?)(?=\\.|\\n|$)/i,\n\t\t/Improvement: (.+?)(?=\\.|\\n|$)/i\n\t];\n\n\tfor (const pattern of patterns) {\n\t\tconst match = text.match(pattern);\n\t\tif (match && match[1]) {\n\t\t\treturn match[1].trim() + '.';\n\t\t}\n\t}\n\n\treturn '';\n}\n\n/**\n * Format a claim item with consistent structure\n * @param {number} number - Claim number\n * @param {string} text - Claim text\n * @param {string} type - Claim type\n * @param {string} confidence - Confidence level\n * @param {string} explanation - Explanation text\n * @param {string} improvement - Improvement suggestion\n * @returns {string} - Formatted HTML for the claim\n */\nfunction formatClaimItem(number, text, type, confidence, explanation, improvement) {\n\t// Clean up and normalize the inputs\n\ttext = text ? text.trim() : '';\n\ttype = type ? type.trim() : '';\n\tconfidence = confidence ? confidence.trim() : '';\n\n\t// Handle different confidence formats\n\tlet confidenceClass = confidence ? confidence.toLowerCase().replace(/\\s+/g, '-') : '';\n\n\treturn `\n    <div class=\"claim-item\">\n        <div class=\"claim-number\">${number}.</div>\n        <div class=\"claim-text\">\"${text}\"</div>\n        ${type ? `<div class=\"claim-type\"><span class=\"type-label\">Type:</span> <span class=\"type-value\">${type}</span></div>` : ''}\n        ${confidence ? `<div class=\"claim-confidence\"><span class=\"confidence ${confidenceClass}\">${confidence}</span></div>` : ''}\n        ${explanation ? `<div class=\"claim-explanation\"><span class=\"explanation-label\">Issue:</span> ${explanation}</div>` : ''}\n        ${improvement ? `<div class=\"claim-improvement\"><span class=\"improvement-label\">Suggested Improvement:</span> ${improvement}</div>` : ''}\n    </div>`;\n}\n\n/**\n * Format a claim from extracted details (helper for alternative parsing)\n * @param {number} number - The claim number\n * @param {Object} details - The claim details\n * @returns {string} - Formatted HTML for the claim\n */\nfunction formatClaimFromDetails(number, details) {\n\treturn formatClaimItem(\n\t\tnumber,\n\t\tdetails.text || 'Unspecified claim',\n\t\tdetails.type || '',\n\t\tdetails.confidence || '',\n\t\tdetails.explanation || '',\n\t\tdetails.improvement || ''\n\t);\n}\n\n/**\n * Show error message\n * @param {string} message - Optional custom error message\n */\nfunction showError(message) {\n\tloadingIndicator.classList.add('hidden');\n\tsummaryContent.classList.add('hidden');\n\terrorMessage.classList.remove('hidden');\n\n\tif (message) {\n\t\tconst errorText = errorMessage.querySelector('p');\n\t\tif (errorText) {\n\t\t\terrorText.textContent = message;\n\t\t}\n\t}\n}\n\n/**\n * Update the footer with version and build info\n */\nfunction updateFooterInfo() {\n\tconst footerElement = document.querySelector('.app-footer p');\n\tif (footerElement) {\n\t\tlet buildNumber = 'dev';\n\t\ttry {\n\t\t\tif (typeof process !== 'undefined' && process.env && process.env.BUILD_NUMBER) {\n\t\t\t\tbuildNumber = process.env.BUILD_NUMBER;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log('Build number not available:', e);\n\t\t}\n\t\tfooterElement.textContent = `Project Chimera v1.0.1.${buildNumber}`;\n\t}\n}\n\n/**\n * Check if API key exists and redirect to settings if not\n */\nfunction checkApiKeyAndRedirect() {\n\tchrome.storage.local.get(['settings'], data => {\n\t\tconst settings = data.settings || {};\n\t\tconst apiKey = settings.apiKey;\n\n\t\tif (!apiKey || apiKey.trim() === '') {\n\t\t\tconsole.log('No API key found, redirecting to settings tab');\n\t\t\tswitchToTab('settings');\n\t\t}\n\t});\n}\n\n/**\n * Switch to specified tab programmatically\n * @param {string} tabName - Name of the tab to switch to\n */\nfunction switchToTab(tabName) {\n\tconst targetButton = Array.from(tabButtons).find(\n\t\tbutton => button.getAttribute('data-tab') === tabName\n\t);\n\n\tif (targetButton) {\n\t\ttabButtons.forEach(btn => {\n\t\t\tbtn.classList.remove('active');\n\t\t});\n\t\ttargetButton.classList.add('active');\n\n\t\ttabPanels.forEach(panel => {\n\t\t\tpanel.classList.remove('active');\n\t\t\tpanel.classList.add('hidden');\n\t\t});\n\n\t\tconst activePanel = document.getElementById(`${tabName}-tab`);\n\t\tactivePanel.classList.add('active');\n\t\tactivePanel.classList.remove('hidden');\n\t}\n}\n\n/**\n * Load history data and populate the history tab\n */\nasync function loadHistoryData() {\n\tconst historyList = document.getElementById('history-list');\n\tif (!historyList) return;\n\n\tconst history = await getSummaryHistory();\n\n\tif (history.length === 0) {\n\t\thistoryList.innerHTML = `\n      <div class=\"empty-state\">\n        <p>No summary history yet.</p>\n      </div>\n    `;\n\t\treturn;\n\t}\n\n\thistoryList.innerHTML = '';\n\n\thistory.forEach((item, index) => {\n\t\tconst historyItem = createHistoryItemElement(item, index);\n\t\thistoryList.appendChild(historyItem);\n\t});\n\n\tsetupHistorySearch();\n}\n\n/**\n * Create a history item element\n * @param {Object} item - The history item data\n * @param {number} index - The index of the item in the history array\n * @returns {HTMLElement} The created element\n */\nfunction createHistoryItemElement(item, index) {\n\tconst itemElement = document.createElement('div');\n\titemElement.className = 'history-item';\n\titemElement.dataset.index = index;\n\n\tconst date = new Date(item.timestamp || item.metadata.timestamp);\n\tconst formattedDate = date.toLocaleString();\n\n\tconst formatName = getFormatDisplayName(item.options.format);\n\tconst lengthName = getLengthDisplayName(item.options.length);\n\n\tlet formattedContent = item.content;\n\n\tif (item.options.format === 'bullets') {\n\t\tformattedContent = item.content\n\t\t\t.split('\\n')\n\t\t\t.filter(line => line.trim())\n\t\t\t.map(line => `<div class=\"bullet-point\">${line.trim()}</div>`)\n\t\t\t.join('');\n\t}\n\n\titemElement.innerHTML =\n\t\t'<div class=\"history-item-header\">' +\n\t\t'<h3 class=\"history-item-title\">' + (item.metadata.title || 'Untitled Page') + '</h3>' +\n\t\t'<div class=\"history-item-actions\">' +\n\t\t'<button class=\"history-copy-btn\" title=\"Copy Summary\">' +\n\t\t'<span class=\"icon\">📋</span>' +\n\t\t'</button>' +\n\t\t'<button class=\"history-delete-btn\" title=\"Delete Summary\">' +\n\t\t'<span class=\"icon\">🗑️</span>' +\n\t\t'</button>' +\n\t\t'</div>' +\n\t\t'</div>' +\n\t\t'<div class=\"history-item-meta\">' +\n\t\t'<span class=\"history-item-date\">' + formattedDate + '</span>' +\n\t\t'<span class=\"history-item-format\">' + formatName + ', ' + lengthName + '</span>' +\n\t\t'</div>' +\n\t\t'<div class=\"history-item-url\" title=\"' + item.metadata.url + '\">' +\n\t\titem.metadata.url +\n\t\t'</div>' +\n\t\t'<div class=\"history-item-content hidden\">' +\n\t\tformattedContent +\n\t\t'</div>';\n\n\tconst copyBtn = itemElement.querySelector('.history-copy-btn');\n\tconst deleteBtn = itemElement.querySelector('.history-delete-btn');\n\tconst contentDiv = itemElement.querySelector('.history-item-content');\n\tconst titleElement = itemElement.querySelector('.history-item-title');\n\n\ttitleElement.addEventListener('click', () => {\n\t\tcontentDiv.classList.toggle('hidden');\n\t});\n\n\tcopyBtn.addEventListener('click', () => {\n\t\tconst content = item.content;\n\t\tnavigator.clipboard.writeText(content)\n\t\t\t.then(() => {\n\t\t\t\tconst originalText = copyBtn.innerHTML;\n\t\t\t\tcopyBtn.innerHTML = '<span class=\"icon\">✓</span>';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tcopyBtn.innerHTML = originalText;\n\t\t\t\t}, 1500);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.error('Could not copy text:', err);\n\t\t\t});\n\t});\n\n\tdeleteBtn.addEventListener('click', async () => {\n\t\tshowCustomConfirmation('Are you sure you want to delete this summary?', async () => {\n\t\t\tawait deleteSummaryFromHistory(index);\n\t\t\tloadHistoryData();\n\t\t});\n\t});\n\n\treturn itemElement;\n}\n\n/**\n * Get display name for format option\n * @param {string} format - Format identifier\n * @returns {string} Display name\n */\nfunction getFormatDisplayName(format) {\n\tconst formats = {\n\t\t'bullets': 'Bullet Points',\n\t\t'academic': 'Academic',\n\t\t'professional': 'Professional',\n\t\t'simplified': 'Simplified'\n\t};\n\treturn formats[format] || format;\n}\n\n/**\n * Get display name for length option\n * @param {string} length - Length identifier\n * @returns {string} Display name\n */\nfunction getLengthDisplayName(length) {\n\tconst lengths = {\n\t\t'brief': 'Brief',\n\t\t'detailed': 'Detailed'\n\t};\n\treturn lengths[length] || length;\n}\n\n/**\n * Set up history search functionality\n */\nfunction setupHistorySearch() {\n\tconst searchInput = document.getElementById('history-search');\n\tif (!searchInput) return;\n\n\tsearchInput.addEventListener('input', () => {\n\t\tconst query = searchInput.value.toLowerCase();\n\t\tconst historyItems = document.querySelectorAll('.history-item');\n\n\t\thistoryItems.forEach(item => {\n\t\t\tconst title = item.querySelector('.history-item-title').textContent.toLowerCase();\n\t\t\tconst url = item.querySelector('.history-item-url').textContent.toLowerCase();\n\t\t\tconst content = item.querySelector('.history-item-content').textContent.toLowerCase();\n\n\t\t\tif (title.includes(query) || url.includes(query) || content.includes(query)) {\n\t\t\t\titem.style.display = 'block';\n\t\t\t} else {\n\t\t\t\titem.style.display = 'none';\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Show a custom confirmation dialog\n *\n * @param {string} message - The confirmation message\n * @param {Function} onConfirm - Callback when user confirms\n * @param {Function} onCancel - Callback when user cancels\n */\nfunction showCustomConfirmation(message, onConfirm, onCancel = () => { }) {\n\tconst existingOverlay = document.querySelector('.confirmation-overlay');\n\tif (existingOverlay) {\n\t\tdocument.body.removeChild(existingOverlay);\n\t}\n\n\tconst overlay = document.createElement('div');\n\toverlay.className = 'confirmation-overlay';\n\n\tconst dialog = document.createElement('div');\n\tdialog.className = 'confirmation-dialog';\n\n\tdialog.innerHTML = `\n    <p>${message}</p>\n    <div class=\"confirmation-buttons\">\n      <button class=\"secondary-button cancel-btn\">Cancel</button>\n      <button class=\"primary-button confirm-btn\">Confirm</button>\n    </div>\n  `;\n\n\toverlay.appendChild(dialog);\n\n\tdocument.body.appendChild(overlay);\n\n\tconst confirmBtn = dialog.querySelector('.confirm-btn');\n\tconst cancelBtn = dialog.querySelector('.cancel-btn');\n\n\tconfirmBtn.addEventListener('click', () => {\n\t\tdocument.body.removeChild(overlay);\n\t\tonConfirm();\n\t});\n\n\tcancelBtn.addEventListener('click', () => {\n\t\tdocument.body.removeChild(overlay);\n\t\tonCancel();\n\t});\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\tinitialize();\n\tupdateFooterInfo();\n});\n"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
